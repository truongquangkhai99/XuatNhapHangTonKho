/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Util.DBConnection;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public final class FrmStocker extends javax.swing.JFrame {

    private final DBConnection connection = new DBConnection();

    /**
     * Creates new form FrmStocker
     */
    public FrmStocker() throws Exception {
        initComponents();

        addDataCategory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbbCategory = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cbbClothes = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        rdoNhap = new javax.swing.JRadioButton();
        rdoXuat = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnPerform = new javax.swing.JButton();
        BtnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Stocker");

        jLabel2.setText("Danh mục");

        cbbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbCategoryActionPerformed(evt);
            }
        });

        jLabel3.setText("Mã sản phẩm ");

        cbbClothes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Trạng thái");

        buttonGroup1.add(rdoNhap);
        rdoNhap.setText("Nhập");

        buttonGroup1.add(rdoXuat);
        rdoXuat.setText("xuất");

        jLabel5.setText("Số lượng");

        btnPerform.setText("Thực hiện");
        btnPerform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPerformActionPerformed(evt);
            }
        });

        BtnClose.setText("Hủy");
        BtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPerform)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(BtnClose))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rdoNhap)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rdoXuat)
                                .addGap(18, 18, 18))
                            .addComponent(cbbClothes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbbCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtQuantity))))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbbClothes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rdoNhap)
                        .addComponent(rdoXuat)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPerform)
                    .addComponent(BtnClose))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbCategoryActionPerformed
        addDataClothes();
    }//GEN-LAST:event_cbbCategoryActionPerformed

    private void btnPerformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPerformActionPerformed
        perform();
    }//GEN-LAST:event_btnPerformActionPerformed

    private void BtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCloseActionPerformed
        int hoi = JOptionPane.showConfirmDialog(this, "Bạn có muốn hủy", "Exit", JOptionPane.YES_NO_OPTION);
        if (hoi == JOptionPane.YES_OPTION) {
            this.dispose();
            FrmAccount ac = new FrmAccount();
            ac.setVisible(true);
        }
    }//GEN-LAST:event_BtnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmStocker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmStocker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmStocker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmStocker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmStocker().setVisible(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
    }

    public void addDataCategory() {
        try {
            Connection con = connection.getConnection();
            String query = "Select*from category";
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                cbbCategory.addItem(rs.getString(2));
            }
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void addDataClothes() {

        cbbClothes.removeAllItems();
        try {
            Connection con = connection.getConnection();

            String query = "select*from CLOTHES cl join category cg on \n"
                    + "cl.CATEGORYID=cg.CATEGORYID where IdList=1 and cg.CATEGORYID \n"
                    + "in (Select CATEGORYID from CATEGORY where CATEGORYNAME="
                    + "N'" + cbbCategory.getSelectedItem().toString() + "'" + ") ";
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                cbbClothes.addItem(rs.getString(3));
            }
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void perform() {
        Connection con;
        float currentPrice = 0;
        int QuantityUpdate = 0;
        try {
            if (txtQuantity.getText().length() == 0) {
                JOptionPane.showMessageDialog(this, "Không để trống số lượng!");
                return;
            }
            int sl = Integer.parseInt(txtQuantity.getText());
            if (sl<0) {
                JOptionPane.showMessageDialog(this, "số lượng >=0");
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "số lượng phải là số nguyên >0");
            return;
        }
        try {
            con = connection.getConnection();
            String id = null;
            String getID = "select id From clothes where PRODUCTNAME = N'" + cbbClothes.getSelectedItem().toString().trim() + "'";
            Statement st = con.createStatement();
            ResultSet rs1 = st.executeQuery(getID);
            
            while (rs1.next()) {
                id = rs1.getString(1);
            }

            String insertInventoryLog = "INSERT INVENTORYLOG VALUES (?,?,?,?,?) ";
            PreparedStatement pst = con.prepareStatement(insertInventoryLog);
            pst.setString(1, id);
            Date date = new Date();
            DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
            String dateString = df.format(date);
            pst.setString(2, dateString);
            int i = rdoNhap.isSelected() ? 1 : 0;
            pst.setString(3, Integer.toString(i));
            pst.setString(4, txtQuantity.getText());
//            System.exit(0);
            int Quantity = Integer.parseInt(txtQuantity.getText());
            String query = "select*From clothes where PRODUCTNAME = N'" + cbbClothes.getSelectedItem().toString().trim() + "'";
            Statement st2 = con.createStatement();
            ResultSet rs = st2.executeQuery(query);
            if (rs.next()) {
                currentPrice = Float.parseFloat(rs.getString(4));

                String less = "update CLOTHES set QUANTITY=? where PRODUCTNAME = N'" +
                        cbbClothes.getSelectedItem().toString().trim() + "'";

                PreparedStatement pre2 = con.prepareStatement(less);

                if (i == 0 && (Integer.parseInt(rs.getString(5)) < Quantity)) {
                    JOptionPane.showMessageDialog(this, "trong kho chỉ có "+rs.getString(5));
                    return;
                } 
                if (i == 0 && (Integer.parseInt(rs.getString(5)) > Quantity)) {
                    QuantityUpdate = Integer.parseInt(rs.getString(5)) - Quantity;

                    pre2.setString(1, Integer.toString(QuantityUpdate));
//                    pre2.setString(2, cbbClothes.getSelectedItem().toString());
                    pre2.executeUpdate();
                } else {
                    QuantityUpdate = Integer.parseInt(rs.getString(5)) + Quantity;
                    pre2.setString(1, Integer.toString(QuantityUpdate));
//                    pre2.setString(2, cbbClothes.getSelectedItem().toString());
                    pre2.executeUpdate();
                }//////////////////////////////////////////
            }
            BigDecimal price = new BigDecimal(currentPrice * Quantity);
            System.out.println(price);            
            pst.setString(5, price.toString());
            pst.executeUpdate();
//            System.out.println(price);
            JOptionPane.showMessageDialog(this, "Thêm bản ghi thành công");
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnClose;
    private javax.swing.JButton btnPerform;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbbCategory;
    private javax.swing.JComboBox<String> cbbClothes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JRadioButton rdoNhap;
    private javax.swing.JRadioButton rdoXuat;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
